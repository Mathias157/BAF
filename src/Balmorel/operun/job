###!/bin/sh
### General options
### -- specify queue --
#BSUB -q man
### -- set the job Name --
#BSUB -J 3step_newoperun
### -- ask for number of cores (default: 1) --
#BSUB -n 20
### -- specify that we need a certain architecture --
#BSUB -R "select[model == XeonPlatinum8462Y]"
### -- specify that the cores must be on the same host --
#BSUB -R "span[hosts=1]"
### -- specify that we need X GB of memory per core/slot --
#BSUB -R "rusage[mem=2GB]"
### -- specify that we want the job to get killed if it exceeds X GB per core/slot --
#BSUB -M 2.1GB
### -- set walltime limit: hh:mm --
#BSUB -W 10:00
### -- set the email address --
#BSUB -u mberos@dtu.dk
### -- send notification at start --
##BSUB -B
### -- send notification at completion --
#BSUB -N
### -- Specify the output and error file. %J is the job-id --
### -- -o and -e mean append, -oo and -eo mean overwrite --
#BSUB -o ./logs/3step_newoperun_%J.out
#BSUB -e ./logs/3step_newoperun_%J.err
# here follow the commands you want to execute with input.in as the input file

### Path to GAMS binary
export PATH=/appl/gams/47.6.0:$PATH

### Activate spatialstudy environment
source ~/miniconda3/bin/activate spatialstudy


for name in N2 N10 N30 N50 N70 base; do
    for runtype in dispatch operun; do

        # Copy most results from disaggregated run to simex
        if [ $runtype = "dispatch" ]; then
            cp -f ./simex_${name}_ZCEHX/*.gdx ./simex
        fi

        # Seasonal heuristic for synfuel demand
        # python analysis/peri-process.py ${name}_ZCEHX seasonal-synfuel 
        
        # Remove previous data and copy new
        rm DA_operun/data/*.inc 
        cp -f ${name}/data/*.inc DA_operun/data/

        # Copy S and T
        cp -f DA_operun/S.inc DA_operun/data/
        cp -f "DA_operun/T_${runtype}.inc" "DA_operun/data/T.inc"

        # Choose balopt
        mv "DA_operun/model/balopt_${runtype}.opt" "DA_operun/model/balopt.opt"

        # # Disaggregate capacities
        # if [ $name != "base" ]; then
        #     python simex/oper-input.py disagg $name base
        # else
        #     echo "Skipping disaggregation due to running ${name} scenario"
        # fi

        # Running Balmorel 
        cd DA_operun/model 
        gams Balmorel --scenario_name "${name}_ZCEHX_${runtype}"

        # Exit, if there are errors
        if [ $? -ne 0 ]; then
            echo "GAMS execution failed for scenario ${name}_ZCEHX_${runtype}"
            exit 1
        fi
        
        cd ../../

        # Copy the simex folder
        # cp simex -r simex_$name

        # Choose balopt
        mv "DA_operun/model/balopt.opt" "DA_operun/model/balopt_${runtype}.opt"

        # Analyse adequacy
        # analyse adequacy ${name}_ZCEHX_operun --nth-max 3
    done
    
    analyse adequacy ${name}_ZCEHX_operun
done