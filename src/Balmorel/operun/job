###!/bin/sh
### General options
### -- specify queue --
#BSUB -q man
### -- set the job Name --
#BSUB -J 3step_newoperun
### -- ask for number of cores (default: 1) --
#BSUB -n 20
### -- specify that we need a certain architecture --
#BSUB -R "select[model == XeonPlatinum8462Y]"
### -- specify that the cores must be on the same host --
#BSUB -R "span[hosts=1]"
### -- specify that we need X GB of memory per core/slot --
#BSUB -R "rusage[mem=2GB]"
### -- specify that we want the job to get killed if it exceeds X GB per core/slot --
#BSUB -M 2.1GB
### -- set walltime limit: hh:mm --
#BSUB -W 10:00
### -- set the email address --
#BSUB -u mberos@dtu.dk
### -- send notification at start --
##BSUB -B
### -- send notification at completion --
#BSUB -N
### -- Specify the output and error file. %J is the job-id --
### -- -o and -e mean append, -oo and -eo mean overwrite --
#BSUB -o ./logs/3step_newoperun_%J.out
#BSUB -e ./logs/3step_newoperun_%J.err
# here follow the commands you want to execute with input.in as the input file

### Path to GAMS binary
export PATH=/opt/gams/48.5:$PATH


epoch=2

while [ $epoch -le 3000 ]
do
    for name in test; do
        for runtype in capacity dispatch operun; do

            # Copy most results from disaggregated run to simex
            # if [ $runtype = "dispatch" ]; then
            #     cp -f ./simex_${name}_ZCEHX/*.gdx ./simex
            # fi

            # Seasonal heuristic for synfuel demand
            # python analysis/peri-process.py ${name}_ZCEHX seasonal-synfuel 
            
            # Remove previous data and copy new
            # rm operun/data/*.inc 
            # cp -f ${name}/data/*.inc operun/data/

            # Copy S and T
            rm operun/data/*.inc
            if [ $runtype = "capacity" ]; then
                cp -f operun/capexp_data/*.inc operun/data
            else
                # If not capacity, then use base/data !
                
                cp -f operun/S.inc operun/data/
                cp -f "operun/T_${runtype}.inc" "operun/data/T.inc"

                # Choose balopt
                mv "operun/model/balopt_${runtype}.opt" "operun/model/balopt.opt"
            fi

            # # Disaggregate capacities
            # if [ $name != "base" ]; then
            #     python simex/oper-input.py disagg $name base
            # else
            #     echo "Skipping disaggregation due to running ${name} scenario"
            # fi

            # Running Balmorel 
            cd operun/model 
            gams Balmorel --scenario_name "${name}E${epoch}_${runtype}"

            # Exit, if there are errors
            if [ $? -ne 0 ]; then
                echo "GAMS execution failed for scenario ${name}E${epoch}_${runtype}"
                exit 1
            fi
            
            cd ../../

            # Copy the simex folder
            # cp simex -r simex_$name

            if [ $runtype != "capacity" ]; then
                # Rename balopt back
                mv "operun/model/balopt.opt" "operun/model/balopt_${runtype}.opt"
            fi

            # Analyse adequacy
            # analyse adequacy ${name}_operun --nth-max 3
        done
        
        python analysis/analyse.py adequacy "${name}E${epoch}_operun"
    done

  cd ../
  python Workflow/Functions/neural_network.py "${name}E${epoch}_operun" $epoch
  cd Balmorel
  ((epoch++))
done